"use strict";(self.webpackChunkdocs_gummypix=self.webpackChunkdocs_gummypix||[]).push([[28],{5061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"compilation","title":"Construire votre premier projet","description":"Dans cet exemple nous allons cr\xe9er un projet o\xf9 nous allons lire une image et calculer son gradient.","source":"@site/docs/compilation.md","sourceDirName":".","slug":"/compilation","permalink":"/GummyPix/docs/compilation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/compilation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/GummyPix/docs/installation"}}');var r=t(4848),o=t(8453);const a={},s="Construire votre premier projet",c={},m=[];function u(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"construire-votre-premier-projet",children:"Construire votre premier projet"})}),"\n",(0,r.jsx)(n.p,{children:"Dans cet exemple nous allons cr\xe9er un projet o\xf9 nous allons lire une image et calculer son gradient."}),"\n",(0,r.jsx)(n.p,{children:"Premi\xe8rement cr\xe9er un fichier calcul_gradient.c:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include <GummyPix/GummyPix.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\n\n\nint main(int argc, char **argv) {\n\n    if (argc == 1) {\n        fprintf(stderr, "Erreur, vous devez saisir le nom du fichier.\\n");\n        return EXIT_FAILURE;\n    }\n\n    gp_image_t *image = gp_read_image(argv[1]);\n    int32_t *grad_x = gp_gradient(image, SOBEL_GRADIENT, DIRECTION_X);\n    int32_t *grad_y = gp_gradient(image, SOBEL_GRADIENT, DIRECTION_Y);\n\n    for (uint32_t i = 0; i < image->dimension.y; i++) {\n        for (uint32_t j = 0; j < image->dimension.x; j++) {\n\n            double norme = gp_norm((gp_point_t){grad_x[i * image->dimension.x + j], grad_y[i * image->dimension.x + j]});\n            image->data[i * image->dimension.x + j] = (gp_pixels_t){(uint8_t)norme, (uint8_t)norme, (uint8_t)norme, 0};\n        }\n    }\n\n    gp_write_image("gradient.bmp", image);\n    gp_close_image(image);\n\n    return EXIT_SUCCESS;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dans cet exemple, on lit d'abord l'image avec gp_read_image. Cette fonction renvoie une structure de type gp_image_t."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);